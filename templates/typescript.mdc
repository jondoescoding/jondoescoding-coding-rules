---
description: TypeScript coding standards and best practices
globs: ["**/*.ts", "**/*.tsx"]
alwaysApply: false
---

# TypeScript Development Rules

## Code Style
- Use interfaces over type aliases for object shapes
- Prefer explicit return types for functions
- Use strict TypeScript configuration
- Avoid `any` type - use `unknown` instead

## Naming Conventions
- Use PascalCase for types, interfaces, and classes
- Use camelCase for variables and functions
- Use UPPER_CASE for constants
- Prefix interfaces with 'I' only when necessary

## Best Practices
- Always handle async operations with proper error handling
- Use optional chaining (`?.`) and nullish coalescing (`??`)
- Implement proper type guards for runtime type checking
- Use generics for reusable type-safe code

## Examples
```typescript
// Good
interface UserProfile {
  id: string;
  name: string;
  email?: string;
}

const fetchUser = async (id: string): Promise<UserProfile | null> => {
  try {
    const response = await api.get(`/users/${id}`);
    return response.data ?? null;
  } catch (error) {
    console.error('Failed to fetch user:', error);
    return null;
  }
};

// Avoid
const fetchUser = async (id: any) => {
  const response = await api.get(`/users/${id}`);
  return response.data;
};
```