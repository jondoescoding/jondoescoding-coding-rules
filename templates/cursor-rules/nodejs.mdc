---
description: Node.js backend development standards
globs: ["**/*.js", "**/*.ts", "server/**/*", "api/**/*"]
alwaysApply: false
---

# Node.js Development Rules

## Error Handling
- Always handle async operations with try-catch
- Use proper HTTP status codes
- Log errors with context
- Never expose internal errors to clients

## Security
- Validate all input data
- Use environment variables for secrets
- Implement proper authentication/authorization
- Use HTTPS in production

## Performance
- Use async/await consistently
- Implement proper database connection pooling
- Cache frequently accessed data
- Use streaming for large data transfers

## Code Organization
- Separate routes, controllers, and services
- Use middleware for cross-cutting concerns
- Implement proper logging
- Follow RESTful API conventions

## Examples
```javascript
// Good
const express = require('express');
const { body, validationResult } = require('express-validator');

const createUser = async (req, res) => {
  try {
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      return res.status(400).json({ errors: errors.array() });
    }

    const { name, email } = req.body;
    const user = await userService.createUser({ name, email });
    
    res.status(201).json({ data: user });
  } catch (error) {
    logger.error('Failed to create user:', { error: error.message, body: req.body });
    res.status(500).json({ error: 'Internal server error' });
  }
};

app.post('/api/users', 
  body('email').isEmail(),
  body('name').isLength({ min: 2 }),
  createUser
);
```